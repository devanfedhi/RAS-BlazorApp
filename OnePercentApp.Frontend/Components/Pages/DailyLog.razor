@page "/dailylog"
@using Microsoft.AspNetCore.Authorization
@using OnePercentApp.Frontend.Data
@inject OnePercentAppContext onePercentAppContext
@attribute [Authorize(Roles = "Admin,User")]
@rendermode InteractiveServer

<PageTitle>Daily Log</PageTitle>

<div class="container mt-4">
    <h3 class="text-primary">Daily Log</h3>
    <p class="text-secondary">Track your progress today by creating a log of something you did 1% better in!</p>
    <div class="mt-2">
        <a class="btn btn-primary" href="/createlog">New Log</a>
    </div>

    <table class="table table-striped table-bordered table-hover mt-3">
        <thead class="table-dark">
            <th>Log Date</th>
            <th>Log Title</th>
            <th>Log Description</th>
            <th></th>
        </thead>
        <tbody>
            @if (logs is not null)
            {
                @foreach (var log in logs)
                {
                    <tr>
                        <td>@log.LogDate</td>
                        <td>@log.LogTitle</td>
                        <td>@log.LogDescription</td>
                        <td>
                            <div class="d-flex">
                                <a class="btn btn-primary me-2" role="button" href="@LogUrl(log.LogId)">
                                    <i class="bi bi-pencil"></i>
                                </a>
                                @* <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="@GetDeleteModalId(game)"> *@
                                @*     <i class="bi bi-x-lg"></i> *@
                                @* </button> *@
                            </div>
                            @* <DeleteGame Game="@game"/> *@
                        </td>
                    </tr>

                }
            }
            
        </tbody>
    </table>

    <div class="mb-3 text-center">
        <span class="text-danger">@errorMessage</span>
    </div>
</div>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private int? userId = null;
    private string? errorMessage;
    private List<Log>? logs;

    protected override async Task OnInitializedAsync()
    {
        await ObtainLogDataAsync();
    }


    private async Task ObtainLogDataAsync()
    {
        var authenticationState = await authenticationStateTask;
        var user = authenticationState.User;


        userId = Convert.ToInt32(user.FindFirst("UserId").Value);

        logs = onePercentAppContext.Logs.Where(x => x.UserId == userId).OrderByDescending(x => x.LogDate).ToList();

        if (logs.Count == 0)
        {
            errorMessage = "You have no existing logs. Track your progress by creating a log!";
            return;
        }


    }

    private static string LogUrl(int id)
    {
        return $"/editlog/{id}";
    }

}
