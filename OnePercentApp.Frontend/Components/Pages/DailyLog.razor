@page "/dailylog"
@using Microsoft.AspNetCore.Authorization
@using OnePercentApp.Frontend.Data
@inject OnePercentAppContext onePercentAppContext
@attribute [Authorize(Roles = "Admin,User")]

<PageTitle>Daily Log</PageTitle>

<div class="container mt-4">
    <h3 class="text-primary">Daily Log</h3>
    <p class="text-secondary">test</p>
    <div class="mt-2">
        <a class="btn btn-primary" href="/editgame">New Game</a>
    </div>
    <table class="table table-striped table-bordered table-hover mt-3">
        <thead class="table-dark">
            <th>Id</th>
            <th>Name</th>
            <th>Genre</th>
            <th class="text-end">Price</th>
            <th>Release Date</th>
            <th></th>
        </thead>
            <td>test</td>
            <td>test</td>
            <td>test</td>
            <td>test</td>
            <td>test</td>
            <td>test</td>
        <tbody>
        </tbody>
    </table>
</div>

@code {
    private async Task ObtainLogDataAsync()
    {
        // @context.User.FindFirst("UserId")
        // var log = onePercentAppContext.Logs.Include(u => u.Role).Where(x => x.UserId == Model.Email);
        // if (user == null || user.UserPassword != Model.Password)
        // {
        //     errorMessage = "Invalid email or password";
        //     return;
        // }

        // var claims = new List<Claim>
        // {
        //     new Claim(ClaimTypes.Name, user.UserName),
        //     new Claim(ClaimTypes.Email, Model.Email),
        //     new Claim(ClaimTypes.Role, user.Role.RoleName)
        // };

        // var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        // var principal = new ClaimsPrincipal(identity);

        // if (HttpContext == null)
        // {
        //     errorMessage = "HTTP context is null";
        //     return;
        // }
        // await Http
        // Context.SignInAsync(principal);
        // navigationManager.NavigateTo("/");

    }
}
